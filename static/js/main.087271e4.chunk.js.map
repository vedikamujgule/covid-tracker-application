{"version":3,"sources":["redux/countrySlice.js","redux/DetailsSlice.js","components/covidTracker/details.js","components/covidTracker/covid-tracker.js","redux/todoSlice.js","components/todoComponent/todoComponent.js","App.js","redux/store.js","index.js"],"names":["getCountriesAsync","createAsyncThunk","a","fetch","response","ok","json","countries","Countryslice","createSlice","name","initialState","loadingStatus","selectedCountry","reducers","selectCountry","state","action","payload","extraReducers","fulfilled","pending","rejected","actions","getAllDetailsAsync","allDetails","getAllDetailsByCountryAsync","DetailsSlice","confirmed","recovered","deaths","lastUpdate","console","log","value","getDataByCountryId","Details","dispatch","useDispatch","useEffect","className","Covidtracker","useSelector","status","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","maintainAspectRatio","onChange","e","target","map","country","iso3","Date","toString","style","width","height","options","legend","display","position","elements","arc","getTodosAsync","todos","todoSlice","id","title","completed","addTodo","newTodo","now","push","markAscompleted","index","findIndex","todo","deleteTodo","splice","message","TodoComponent","App","configureStore","reducer","todoReducer","countryReducer","allDetailsReducer","ReactDOM","render","store","StrictMode","document","getElementById"],"mappings":"gNAGaA,EAAoBC,YAC7B,yBAD6C,sBAE7C,8BAAAC,EAAA,sEAC2BC,MAAM,4CADjC,YACUC,EADV,QAEgBC,GAFhB,gCAGgCD,EAASE,OAHzC,cAGcC,EAHd,yBAIe,CAACA,cAJhB,4CASEC,EAAeC,YAAY,CAC7BC,KAAK,YACLC,aAAe,CACXJ,UAAW,GACXK,cAAe,GACfC,gBAAiB,IAErBC,SAAS,CACLC,cAAc,SAACC,EAAOC,GAClBD,EAAMH,gBAAiBI,EAAOC,QAAQL,kBAI9CM,eAAa,mBACRnB,EAAkBoB,WAAY,SAACJ,EAAOC,GACnCD,EAAMT,UAAYU,EAAOC,QAAQX,UAAUA,UAC3CS,EAAMJ,cAAgB,aAHjB,cAKRZ,EAAkBqB,SAAU,SAACL,GAC1BA,EAAMJ,cAAgB,aANjB,cAQRZ,EAAkBsB,UAAW,SAACN,GAC3BA,EAAMJ,cAAgB,YATjB,KAkBFJ,GAFiBA,EAAae,QAA/BR,cAECP,EAAf,S,OC1CagB,EAAqBvB,YAC9B,gCAD8C,sBAE9C,8BAAAC,EAAA,sEAC2BC,MAAM,kCADjC,YACUC,EADV,QAEgBC,GAFhB,gCAGiCD,EAASE,OAH1C,cAGcmB,EAHd,yBAIe,CAACA,eAJhB,4CAQSC,EAA8BzB,YACvC,yCADuD,uCAEvD,WAAOiB,GAAP,iBAAAhB,EAAA,sEAC2BC,MAAM,4CAAD,OAA6Ce,EAAQL,kBADrF,YACUT,EADV,QAEgBC,GAFhB,gCAGiCD,EAASE,OAH1C,cAGcmB,EAHd,yBAIe,CAACA,eAJhB,2CAFuD,uDAqBrDE,EAAelB,YAAY,CAC7BC,KAAK,aACLC,aAAe,CACXiB,UAAW,GACXC,UAAW,GACXC,OAAQ,GACRC,WAAY,IAEhBjB,SAAS,GAOTK,eAAa,mBACRK,EAAmBJ,WAAY,SAACJ,EAAOC,GACpCe,QAAQC,IAAI,QAAShB,EAAOC,QAAQO,WAAWM,YAC/Cf,EAAMY,UAAaX,EAAOC,QAAQO,WAAWG,UAAUM,MACvDlB,EAAMa,UAAaZ,EAAOC,QAAQO,WAAWI,UAAUK,MACvDlB,EAAMc,OAAUb,EAAOC,QAAQO,WAAWK,OAAOI,MACjDlB,EAAMe,WAAad,EAAOC,QAAQO,WAAWM,cANxC,cAQRL,EAA4BN,WAAY,SAACJ,EAAOC,GAC7CD,EAAMY,UAAaX,EAAOC,QAAQO,WAAWG,UAAUM,MACvDlB,EAAMa,UAAaZ,EAAOC,QAAQO,WAAWI,UAAUK,MACvDlB,EAAMc,OAAUb,EAAOC,QAAQO,WAAWK,OAAOI,MACjDlB,EAAMe,WAAad,EAAOC,QAAQO,WAAWM,cAZxC,KAmBFJ,GAFqBA,EAAaJ,QAAnCY,mBAECR,EAAf,S,OCZeS,MApDf,YAA8D,IAA3CR,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,UAAUC,EAAqB,EAArBA,OAE9BO,GAFmD,EAAdN,WAE1BO,eAOjB,OANAC,qBAAU,WACNF,EAASb,OACV,CAACa,IAKA,sBAAKG,UAAU,gBAAf,UACI,qBAAKA,UAAU,cAAf,SACI,+CAEJ,qBAAKA,UAAU,OAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,qBAAKA,UAAU,WAAf,SACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,aAAf,UACI,oBAAIA,UAAU,cAAd,uBACA,qBAAIA,UAAU,gCAAd,cAAgDZ,KAChD,mBAAGY,UAAU,uBAAb,yEAIZ,qBAAKA,UAAU,WAAf,SACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,aAAf,UACI,oBAAIA,UAAU,aAAd,uBACA,oBAAIA,UAAU,gCAAd,SAA+CX,IAC/C,mBAAGW,UAAU,uBAAb,yEAIZ,qBAAKA,UAAU,WAAf,SACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,aAAf,UACI,oBAAIA,UAAU,aAAd,oBACA,oBAAIA,UAAU,gCAAd,SAA+CV,IAC/C,mBAAGU,UAAU,uBAAb,oF,QC4CrBC,I,EAAAA,EAjFf,WACI,IAAMJ,EAAWC,cAEjBC,qBAAU,WACNF,EAASrC,OACV,CAACqC,IAEJ,IAAM9B,EAAYmC,aAAY,SAAC1B,GAAD,OAAWA,EAAMT,UAAUA,aACnDoC,EAASD,aAAY,SAAC1B,GAAD,OAAWA,EAAMT,UAAUK,iBAChDgB,EAAYc,aAAY,SAAC1B,GAAD,OAAWA,EAAMS,WAAWG,aACpDC,EAAYa,aAAY,SAAC1B,GAAD,OAAWA,EAAMS,WAAWI,aACpDC,EAASY,aAAY,SAAC1B,GAAD,OAAWA,EAAMS,WAAWK,UACjDC,EAAaW,aAAY,SAAC1B,GAAD,OAAWA,EAAMS,WAAWM,cAmBrDa,EAAO,CACTC,OAAQ,CAAC,MAAO,OAAQ,SAAU,QAAS,SAAU,UACrDC,SAAU,CACR,CACEC,MAAO,OACPH,KAAM,CAAChB,EAAUC,EAAUC,GAC3BkB,gBAAiB,CACf,0BACA,0BACA,2BAGFC,YAAa,CACX,wBACA,wBACA,yBAEFC,YAAa,EACbC,qBAAqB,KAI7B,OACI,mCACI,sBAAKX,UAAU,0CAAf,UACI,gCACI,+CAEe,WAAXG,EAAsB,yDAEH,YAAXA,EAAuB,kDACnB,wBACIS,SAAU,SAACC,GAAD,OAAOhB,EAASX,EAA4B,CAAEb,gBAAiBwC,EAAEC,OAAOpB,UADtF,SAEK3B,EAAUgD,KAAI,SAACC,GAAD,OAAa,wBAA2BtB,MAAOsB,EAAQC,KAA1C,SAAiDD,EAAQ9C,MAA5C8C,EAAQ9C,cAMzE,cAAC,EAAD,CAASkB,UAAWA,EAAWC,UAAWA,EAAWC,OAAQA,IAC7D,oDAAwB,IAAI4B,KAAK3B,GAAa4B,cAC9C,qBAAKC,MAzDF,CACTC,MAAO,MACPC,OAAQ,OAuDF,SACC,cAAC,IAAD,CAAUlB,KAAMA,EAAMmB,QArDjB,CACdC,OAAQ,CACNC,SAAS,EACTC,SAAU,SAEZC,SAAU,CACRC,IAAK,CACHlB,YAAa,eChCZmB,G,MAAgBpE,YACzB,sBADyC,sBAEzC,8BAAAC,EAAA,sEAC2BC,MAAM,+BADjC,YACUC,EADV,QAEgBC,GAFhB,gCAG4BD,EAASE,OAHrC,cAGcgE,EAHd,yBAIe,CAACA,UAJhB,6CAUEC,EAAY9D,YAAY,CAC1BC,KAAK,QACLC,aAAe,CACX,CAAC6D,GAAG,EAAGC,MAAO,QAASC,WAAW,GAClC,CAACF,GAAG,EAAGC,MAAO,QAASC,WAAW,GAClC,CAACF,GAAG,EAAGC,MAAO,QAASC,WAAW,IAEtC5D,SAAU,CACN6D,QAAQ,SAAC3D,EAAOC,GACZ,IAAM2D,EAAU,CACZJ,GAAId,KAAKmB,MACTJ,MAAOxD,EAAOC,QAAQuD,MACtBC,WAAW,GAEf1D,EAAM8D,KAAKF,IAEfG,gBAAgB,SAAC/D,EAAOC,GACpB,IAAM+D,EAAQhE,EAAMiE,WAAU,SAACC,GAAD,OAAUA,EAAKV,KAAOvD,EAAOC,QAAQsD,MAC/DxD,EAAMgE,GAAON,UAAYzD,EAAOC,QAAQwD,WAEhDS,WAAW,SAACnE,EAAOC,GACf,IAAM+D,EAAQhE,EAAMiE,WAAU,SAACC,GAAD,OAAUA,EAAKV,KAAOvD,EAAOC,QAAQsD,MAC/DxD,EAAMoE,OAAOJ,EAAO,KAIhC7D,eAAa,mBACRkD,EAAcjD,WAAY,SAACJ,EAAOC,GAE/B,OADAe,QAAQC,IAAI,aACLhB,EAAOC,QAAQoD,SAHjB,cAKRD,EAAchD,SAAU,SAACL,EAAOC,GACzB,OAAOA,EAAOC,QAAQmE,WANrB,K,EAYqCd,EAAUhD,QACjDgD,G,EADDI,Q,EAASI,gB,EAAgBI,WACxBZ,EAAf,SCrCee,ICFAC,EATH,WACX,OACA,mCAEA,cAAC,EAAD,OCJcC,cAAe,CAC7BC,QAAS,CACFnB,MAAOoB,EACbnF,UAAWoF,EACXlE,WAAYmE,KCDdC,IAASC,OACR,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACA,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,QAGDC,SAASC,eAAe,U","file":"static/js/main.087271e4.chunk.js","sourcesContent":["\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const getCountriesAsync = createAsyncThunk(\r\n    'countries/getCountries',\r\n    async () =>{\r\n        const response = await fetch('https://covid19.mathdro.id/api/countries');\r\n        if(response.ok) {\r\n            const countries = await response.json();\r\n            return {countries}\r\n        }\r\n    }\r\n);\r\n\r\nconst Countryslice = createSlice({\r\n    name:\"countries\",\r\n    initialState : {\r\n        countries: [],\r\n        loadingStatus: \"\",\r\n        selectedCountry: \"\"\r\n    },\r\n    reducers:{\r\n        selectCountry:(state, action) =>{\r\n            state.selectedCountry= action.payload.selectedCountry\r\n            // state[index].selectedCountry = n.payload.completed;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [getCountriesAsync.fulfilled]: (state, action)=>{\r\n            state.countries = action.payload.countries.countries;\r\n            state.loadingStatus = \"success\";\r\n        },\r\n        [getCountriesAsync.pending]: (state)=>{\r\n            state.loadingStatus = \"loading\";\r\n        },\r\n        [getCountriesAsync.rejected]: (state)=>{\r\n            state.loadingStatus = \"failed\";\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nexport const {selectCountry} =  Countryslice.actions;\r\n\r\nexport default Countryslice.reducer;\r\n","\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const getAllDetailsAsync = createAsyncThunk(\r\n    'allDetails/getAllDetailsAsync',\r\n    async () =>{\r\n        const response = await fetch('https://covid19.mathdro.id/api');\r\n        if(response.ok) {\r\n            const allDetails = await response.json();\r\n            return {allDetails}\r\n        }\r\n    }\r\n);\r\nexport const getAllDetailsByCountryAsync = createAsyncThunk(\r\n    'allDetails/getAllDetailsByCountryAsync',\r\n    async (payload) =>{\r\n        const response = await fetch(`https://covid19.mathdro.id/api/countries/${payload.selectedCountry}`);\r\n        if(response.ok) {\r\n            const allDetails = await response.json();\r\n            return {allDetails}\r\n        }\r\n    }\r\n);\r\n\r\n// let FetchActions = id => async (dispatch, getState) => {\r\n//     await API.post(\"companies/\",id)\r\n//       .then((res) => {\r\n//         dispatch({ type: \"FETCH_COMPANIES\", payload: res.data })\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err)\r\n//       });\r\n//   };\r\n  \r\nconst DetailsSlice = createSlice({\r\n    name:\"allDetails\",\r\n    initialState : {\r\n        confirmed: \"\",\r\n        recovered: \"\",\r\n        deaths: \"\",\r\n        lastUpdate: \"\"\r\n    },\r\n    reducers:{\r\n        // getDataByCountryId:(state, action) =>{\r\n        //     state.selectedCountry= action.payload.selectedCountry\r\n        //     state.confirmed =  action.payload.allDetails.confirmed.value;\r\n        //     state.recovered =  action.payload.allDetails.recovered.value\r\n        //     state.deaths =  action.payload.allDetails.deaths.value }\r\n    },\r\n    extraReducers: {\r\n        [getAllDetailsAsync.fulfilled]: (state, action)=>{\r\n            console.log('state', action.payload.allDetails.lastUpdate);\r\n            state.confirmed =  action.payload.allDetails.confirmed.value;\r\n            state.recovered =  action.payload.allDetails.recovered.value;\r\n            state.deaths =  action.payload.allDetails.deaths.value;\r\n            state.lastUpdate = action.payload.allDetails.lastUpdate;\r\n        },\r\n        [getAllDetailsByCountryAsync.fulfilled]: (state, action)=>{\r\n            state.confirmed =  action.payload.allDetails.confirmed.value;\r\n            state.recovered =  action.payload.allDetails.recovered.value;\r\n            state.deaths =  action.payload.allDetails.deaths.value;\r\n            state.lastUpdate = action.payload.allDetails.lastUpdate;\r\n        }, \r\n    }\r\n});\r\n\r\nexport const {getDataByCountryId} = DetailsSlice.actions;\r\n\r\nexport default DetailsSlice.reducer;\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getAllDetailsAsync } from '../../redux/DetailsSlice';\r\n\r\nfunction Details({ confirmed, recovered,deaths,lastUpdate }) {\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getAllDetailsAsync());\r\n    }, [dispatch]);\r\n\r\n\r\n   \r\n    return (\r\n        <div className='bg-white mt-5'>\r\n            <div className='text-center'>\r\n                <h5>All Details</h5>\r\n            </div>\r\n            <div className=\"py-5\">\r\n                <div className=\"container\">\r\n                    <div className=\"row hidden-md-up\">\r\n                        <div className=\"col-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-block\">\r\n                                    <h4 className=\"card-title \">Confirmed</h4>\r\n                                    <h6 className=\"card-subtitle text-muted mt-1\"> {confirmed}</h6>\r\n                                    <p className=\"card-text p-y-1 mt-1\">Some quick example text to build on the card title .</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-block\">\r\n                                    <h4 className=\"card-title\">Recovered</h4>\r\n                                    <h6 className=\"card-subtitle text-muted mt-1\">{recovered}</h6>\r\n                                    <p className=\"card-text p-y-1 mt-1\">Some quick example text to build on the card title .</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-block\">\r\n                                    <h4 className=\"card-title\">Deaths</h4>\r\n                                    <h6 className=\"card-subtitle text-muted mt-1\">{deaths}</h6>\r\n                                    <p className=\"card-text p-y-1 mt-1\">Some quick example text to build on the card title .</p>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Details;\r\n","import React, { useEffect } from 'react'\r\nimport { getCountriesAsync, selectCountry } from '../../redux/countrySlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Details from './details';\r\nimport { getAllDetailsByCountryAsync } from '../../redux/DetailsSlice';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nfunction Covidtracker() {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getCountriesAsync());\r\n    }, [dispatch]);\r\n\r\n    const countries = useSelector((state) => state.countries.countries);\r\n    const status = useSelector((state) => state.countries.loadingStatus);\r\n    const confirmed = useSelector((state) => state.allDetails.confirmed);\r\n    const recovered = useSelector((state) => state.allDetails.recovered);\r\n    const deaths = useSelector((state) => state.allDetails.deaths);\r\n    const lastUpdate = useSelector((state) => state.allDetails.lastUpdate);\r\n\r\n    const styles = {\r\n        container: {\r\n          width: \"40%\",\r\n          height: \"40%\",\r\n        }\r\n      };\r\n      const options = {\r\n        legend: {\r\n          display: false,\r\n          position: \"right\"\r\n        },\r\n        elements: {\r\n          arc: {\r\n            borderWidth: 0\r\n          }\r\n        }\r\n      };\r\n    const data = {\r\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\r\n        datasets: [\r\n          {\r\n            label: 'data',\r\n            data: [confirmed,recovered,deaths],\r\n            backgroundColor: [\r\n              'rgba(255, 99, 132, 0.2)',\r\n              'rgba(54, 162, 235, 0.2)',\r\n              'rgba(255, 206, 86, 0.2)'\r\n\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n              'rgba(54, 162, 235, 1)',\r\n              'rgba(255, 206, 86, 1)'\r\n            ],\r\n            borderWidth: 1,\r\n            maintainAspectRatio: false,\r\n          },\r\n        ],\r\n      };\r\n    return (\r\n        <>\r\n            <div className='container text-center bg-white p-4 mt-5'>\r\n                <div>\r\n                    <h1>Covid Tracker</h1>\r\n                    {\r\n                        status === \"failed\" ? <p>Failed to load countries</p> :\r\n                            (\r\n                                status === \"pending\" ? <p>loading countries</p> :\r\n                                    <select\r\n                                        onChange={(e) => dispatch(getAllDetailsByCountryAsync({ selectedCountry: e.target.value }))}>\r\n                                        {countries.map((country) => <option key={country.name} value={country.iso3}>{country.name}</option>)}\r\n                                    </select>\r\n                            )\r\n                    }\r\n                </div>\r\n                \r\n                <Details confirmed={confirmed} recovered={recovered} deaths={deaths}/>\r\n                <p>Data Fetached At : {(new Date(lastUpdate)).toString()}</p>\r\n                <div style={styles.container}>\r\n                 <Doughnut data={data} options={options} />\r\n                 </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Covidtracker\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const getTodosAsync = createAsyncThunk(\r\n    'todos/getTodosAsync',\r\n    async () =>{\r\n        const response = await fetch('http://localhost:7000/todos');\r\n        if(response.ok) {\r\n            const todos = await response.json();\r\n            return {todos}\r\n        }\r\n    }\r\n);\r\n\r\n\r\nconst todoSlice = createSlice({\r\n    name:\"todos\",\r\n    initialState : [\r\n        {id:1, title: \"todo1\", completed: false},\r\n        {id:2, title: \"todo1\", completed: false},\r\n        {id:3, title: \"todo1\", completed: true}\r\n    ],\r\n    reducers: {\r\n        addTodo:(state, action) =>{\r\n            const newTodo = {\r\n                id: Date.now(),\r\n                title: action.payload.title,\r\n                completed: false\r\n            };\r\n            state.push(newTodo);\r\n        },\r\n        markAscompleted:(state, action) =>{\r\n            const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n                state[index].completed = action.payload.completed;\r\n        },\r\n        deleteTodo:(state, action) =>{\r\n            const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n                state.splice(index, 1);\r\n                // console.log(\"index\", index)\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getTodosAsync.fulfilled]: (state, action)=>{\r\n            console.log(\"fulfilled\")\r\n            return action.payload.todos;\r\n        },\r\n        [getTodosAsync.pending]: (state, action)=>{\r\n                return action.payload.message;\r\n              console.log(\"pending\")\r\n        }\r\n    }\r\n});\r\n\r\nexport const {addTodo, markAscompleted,deleteTodo} =  todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n","import React from 'react'\r\nimport AddTodoForm from '../todoComponent/AddTodoForm';\r\nimport TodoList from '../todoComponent//TodoList';\r\nimport TotalCompleteItems from '../todoComponent/TotalCompleteItems';\r\n\r\nfunction TodoComponent() {\r\n    return (\r\n        <div className='container bg-white p-4 mt-5'>\r\n        <h1>My Todo List</h1>\r\n        <AddTodoForm />\r\n        <TodoList />\r\n        <TotalCompleteItems />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default TodoComponent;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Covidtracker from './components/covidTracker/covid-tracker';\r\nimport TodoComponent from './components/todoComponent/todoComponent';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t<>\r\n\t{/* <TodoComponent/> */}\r\n\t<Covidtracker/>\r\n\t</>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport todoReducer from './todoSlice';\r\nimport countryReducer from './countrySlice';\r\nimport allDetailsReducer from './DetailsSlice';\r\n\r\nexport default configureStore({\r\n\treducer: {\r\n        todos: todoReducer,\r\n\t\tcountries: countryReducer,\r\n\t\tallDetails: allDetailsReducer\r\n\t},\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport store from './redux/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}